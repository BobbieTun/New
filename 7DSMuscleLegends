local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Webhook URL
local webhookUrl = "https://discord.com/api/webhooks/1358885852721451069/6JgRRvmfrxSvkUL6Yp6H14CQ6bO7kN6JOC_t2j_AWWGZ-A5oM5ddoVvulLantWcKBtIT"

-- Get Stats Safely
local function getStat(path, fallback)
    local success, value = pcall(function()
        return tostring(path.Value)
    end)
    return success and value or fallback
end

local stats = {
    Strength = getStat(LocalPlayer:WaitForChild("leaderstats"):FindFirstChild("Strength"), "N/A"),
    Rebirths = getStat(LocalPlayer.leaderstats:FindFirstChild("Rebirths"), "N/A"),
    Kills = getStat(LocalPlayer.leaderstats:FindFirstChild("Kills"), "N/A"),
    Brawls = getStat(LocalPlayer.leaderstats:FindFirstChild("Brawls"), "N/A"),
    Durability = getStat(LocalPlayer:FindFirstChild("Durability"), "N/A"),
    Agility = getStat(LocalPlayer:FindFirstChild("Agility"), "N/A")
}

-- Webhook Payload
local payload = {
    ["embeds"] = {{
        ["title"] = "üìä Player Stats",
        ["description"] = string.format("**Display Name:** %s\n**Username:** %s", LocalPlayer.DisplayName, LocalPlayer.Name),
        ["fields"] = {
            {["name"] = "üí™ Strength", ["value"] = stats.Strength, ["inline"] = true},
            {["name"] = "üî• Rebirths", ["value"] = stats.Rebirths, ["inline"] = true},
            {["name"] = "‚öîÔ∏è Kills", ["value"] = stats.Kills, ["inline"] = true},
            {["name"] = "üèÜ Brawls", ["value"] = stats.Brawls, ["inline"] = true},
            {["name"] = "üõ°Ô∏è Durability", ["value"] = stats.Durability, ["inline"] = true},
            {["name"] = "üëü Agility", ["value"] = stats.Agility, ["inline"] = true}
        },
        ["type"] = "rich",
        ["color"] = tonumber(0x00ffcc),
        ["footer"] = {
            ["text"] = "Webhook Logger"
        },
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }}
}

-- Send webhook
local requestFunc = (syn and syn.request) or http_request or request or (fluxus and fluxus.request)
if requestFunc then
    requestFunc({
        Url = webhookUrl,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode(payload)
    })

end
